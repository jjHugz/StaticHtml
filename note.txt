2018/05/26 11:00
由于接触到模块化的概念，今天上午查阅了相关资料，现做一个初步总结
javascript模块化:
问题：
1.在编写脚本文件时难免会遇到的命名冲突问题，不同的人在开发时难免会想要使用同样的全局变量名，引起冲突。
后来想要通过命名空间来规范命名，这样的方式带来的是极大的不方便。
var org = {};
org.CoolSite = {};
org.CoolSite.Utils = {};

org.CoolSite.Utils.each = function (arr) {
  // 实现代码
};

org.CoolSite.Utils.log = function (str) {
  // 实现代码
};
2.在编写脚本时同样会遇到需要依赖关系，繁琐的依赖，以及依赖之间的先后引用顺序问题。
<script src="util.js"></script>
<script src="dialog.js"></script>
<script>
  org.CoolSite.Dialog.init({ /* 传入配置 */ });
</script>

解决办法。模块化概念的提出，以下为两种模块化规范：
1.AMD（异步模块定义），主要特点：提前声明所有依赖，执行依赖模块----RequireJS
定义方式：
a.     
define(['./a','./b'],function(a,b){ //依赖必须一开始就写好
    to do
});

b.固定为require,exports, module（modules/wrappings格式） 
define(function(require,exports,module){
    var base = require('base');
    exports.show = function(){
        do something with module base
    }
});

2.CMD（common通用模块定义），主要特点:依赖就近书写----------------SeaJS
定义方式：
a.只有require,exports, module（modules/wrappings格式） 
define(function(require,exports,module){
    var a = require('./a');
    //do with a
    ///
    var b = require('./b');//依赖就近书写
    //do with b
    ///
})

html/css模块化：
1.提取不同页面通用样式，实现基本元素的复用
2.提取公用模块，如：导航栏/版本信息等
开发模式：先划分所有页面公共模块，有人负责框架，有人负责非重复性的模块开发，然后进行框架和模块的整合
原则：
1.按结构呈现进行模块划分，只要结构外观一致，就认为是一个模块，而不是按功能
2.模块稳固，考虑到数据遍历的合理性，是否考虑到dom节点的可操作性，是否考虑到因扩展造成的抗破坏行
3.模块自适应，不可设置高度宽度
4.模块统一边距
5.栅格化

前端模块化：
AngularJS前端模块化MVC框架,此内容还需进一步研究

2018/05/26 22:00
在研究html页面之间传值的过程中，偶然发现一个话题：javascript的异步，先做初步总结，再总结html页面传值
观点：
1.javascript引擎是单线程的，浏览器只有一个线程在运行javascript程序。
2.JavaScript和UI线程是互斥的，js的执行会阻塞页面的渲染。
3.javascript包含主线程和消息队列，同步任务进入主线程，异步任务（IO事件，这里解释一下：例如ajax发出异步数据请求
浏览器新开线程请求，是在请求状态变更后，将状态变更事件放入队列）/用户事件（点击等）/定时器（settimeout，
定时计数器并不是由JavaScript引擎计数的,因为JavaScript引擎是单线程）会进入消息队列，等待主线程中同步任务执行完毕，后开始逐个执行消息队列
//凡是涉及回调的都是异步//
下面讲讲单独两个函数之间异步实现的几种方式：假定有两个函数f1和f2，后者等待前者的执行结果
1.回调函数，将f2作为f1的回调函数即可,函数之间耦合度太高
function f1(callback){
    settimeout(function(){
        //f1..
        callback();
    },1000);
};
2.事件监听，去耦合，但是由于事件的原因，流程不清晰
f1.on('done',f2);
function f1(){
    settimeout(function(){
        //f1
        f1.trigger('done');
    },1000);
}
3.发布/订阅，采用的是Ben Alman的Tiny Pub/Sub，这是jQuery的一个插件
jQuery.subscribe("done", f2);
function f1(){
　　　　setTimeout(function () {
　　　　　　// f1的任务代码
　　　　　　jQuery.publish("done");
　　　　}, 1000);
　　}

2018/05/27 10:00
Git 指令
git add .  一次性添加文件
git commit -m "***"  提交到版本库
cd ***  进入文件夹
cd ..  返回上级
git rm * -r  删除文件及文件夹
git ls-files  查看版本库中文件
//2018/05/28 21:00++
本地修改了文件未提交，又在公司做了修改后提交，回来后想更新，试了commit/pull都出错
a.commit:Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded
b.pull:error: Your local changes to the following files would be overwritten by merge
最后通过stash解决：
a.git stash：备份当前工作区内容到Git栈中
b.git pull：拉取代码
c.git stash pop：从Git栈中读取最近一次工作内容，恢复

2018/05/27 16:00
asp.net中关于表单提交几点问题：
1.生命周期，客户端浏览器发起请求-服务端处理-服务端响应
2.请求分为get和post，区别如下：
a.get会将请求参数附加在url中，post是隐藏在http请求中
b.get附加参数长度有限制，post没有
C.post请求提交后再刷新时浏览器会有提示框，是否要再次提交
3.表单提交只会传递类型为input/textarea/select且带有name属性的value值回去，其他类似div是不行的
4.如果想要提交div的值，只能通过隐藏的input来进行绑定
<form action="./test.php">
<input type="hidden" name="IsPostBack" value="true"></input> //为了知道是初次进入页面还是点击提交表单后
<input type="hidden" name="num1" value="@value"></input>     //为了保存div这类元素的值
<div value="@value" width="@value"></div>
</form>
5.asp.net中自带IsPostBack/viewstate功能
a.IsPostBack时用来判断是初次进入页面还是点击提交表单后的请求
b.viewstate其实就是因为类似div的表单元素不能提交value，asp.net做的隐藏的存储其值的地方，以供下次读取
而类似input在viewstate中是找不到的
7.可禁用整页面或者单个控件ViewState，内网/互联网后台可不禁用，但互联网前端必须禁用listview等控件的ViewState，
不然asp.net会在html中加入大量的ViewState节点
8.ViewState之所以存在就是因为html协议是无状态的，它不能记住上次请求的数据这也导致了加大网站流量/降低访问速度
/机密数据放在表单中的数据欺骗等（这些机密数据应该写入数据库中，通过唯一身份ID进行关联）
9.浏览器发起请求时，除了表单参数外，还有与网站相关的cookie。所以除了在浏览器可以访问，在服务器也可以访问，
返回响应后浏览器也会把服务器的cookie更新浏览器的值。cookie与网站相关/存储在浏览器/跨页面，用来存储上述的唯一身份ID是最合适的
10.互联网优化：图片服务器和主站域名不一样，可以降低cookie流量的传输，在访问图片服务器时不传输主站的cookie
11.asp.net中http请求每次都会new一个IHttpHandler.注意局部变量的作用域

session：将当前访问用户的相关信息保存在服务端，客户端浏览器用cookie保存ID，服务端通过ID查找对应用户的数据
1.结构：Dictionary<string,Dictionary<string,object>> data;
string sessionId = Request.Cookies["MyCookies"];
通过data[sessionId]获取对应用户的数据
2.asp.net中已经实现了session，ASP.NetSession,直接拿来存储数据Session["数值"] = ***;
3.session本质是在服务端为每一个用户开一块内存,当访问量很大的时候服务端的负担太大，所有有一种机制是一段时间没有请求
服务端会干掉这个session,如果想保持session，需要定时发送一些心跳请求

2018/05/28 17:00
AngularJS一些重要组成部分：
1.作用域/控制范围Scope，负责view和Controller之间的数据交互，View中使用指令ng-model="***",Controller中使用语法$Scope.***
，Scope在view和Controller之间建立双向的数据绑定
2.Controller创建一块Scope，继承于Html父节点的Scope，根Scope为$rootScope,Controller中可申明属性和函数
note:这里的继承，在子Scope中使用父Scope普通类型的变量，子Scope会重新声明一个同名的变量导致父Scope中同名的变量被覆盖，这样在子Scope中对同名变量
的修改不会同步到父Scope中，只能使用对象类型：如Array/函数/var object = {value:"***"};
3.Filters/Validators
a.student.subjects | filter: subjectName |orderBy:'marks'/uppercase/lowercase/currency/orderby
b.$dirty - 状态指示值已被改变/$invalid- 指示值的状态是无效的/$error- 指出确切的错误
4.Service/Factory/IOC,可声明服务/工厂后通过注入的方式进行引用
5.内置服务，$http发起XMLHttpRequest请求/$route视图切换（指令ng-view/ng-template/服务$routeProvider）

2018/05/28 22:30
asp.net中ashx和aspx页面的区别及用法
1.ashx是一般处理程序，用来处理html请求（IHttpHandler），配合html文件一起使用，相当于网站服务端
aspx中可读取html文件内容后进行更新再返回，通过write直接往页面输出内容（Response.write/或者输出到context.Response.outputStream），
所以主要用处是生成一些动态的元素
2.aspx是webform页面，包含了页面设计（.aspx文件，也就是html）和后台处理(.aspx.cs,也就是服务端)，类似winform的设计方式
**********************************************************************************
html发请求Request(指定请求的页面,如ajax中的action)，携带信息:cookie/表单数据/浏览器信息等
服务端处理，
Response返回响应给html（Context-Type:json/"text/html"/"image/JPEG"...）,同时返回cookie
**********************************************************************************
3.页面中image/js/css/会分别发送请求，且html是无状态的，
http返回协议中响应码
a.200-成功
b.300-对请求做进一步处理，如重定向
c.400-浏览器请求错误
d.500-服务器内部错误
